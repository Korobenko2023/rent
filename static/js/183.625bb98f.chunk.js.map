{"version":3,"file":"static/js/183.625bb98f.chunk.js","mappings":"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","sources":["redux/autos/selectors.js","components/AutoCard/AutoCard.styled.js","components/AutoCard/AutoCard.js","pages/Catalog/CatalogPage.js"],"sourcesContent":["// import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectAutos = state => state.autos.autosItems;\n\nexport const selectVisible = state => state.autos.visibleItems;\n\nexport const selectIsLoading = state => state.autos.isLoading;\n\nexport const selectError = state => state.autos.error;\n\nexport const selectCurrentPage = (state) => state.autos.currentPage;\n\nexport const selectTotalPages = (state) => state.autos.totalPages;\n\n\n\n// export const selectVisibleContacts = createSelector(\n//   [selectContacts, selectFilter],\n//   (contacts, filter) => {\n//     return contacts.filter(contact => contact.name.toLowerCase()\n//       .includes(filter.toLowerCase().trim()))\n//   }\n// );\n","import styled from 'styled-components';\n// import { FaRegHeart } from 'react-icons/fa6';\n// import { GoStarFill } from 'react-icons/go';\n// import { CiLocationOn } from 'react-icons/ci';\n// import { FaHeart } from 'react-icons/fa';\n\nexport const CardLi = styled.li`\n  display: flex;\n  flex-shrink: 0;\n  gap: 24px;\n  border: 1px solid ${(p) => p.theme.colors.black};\n  border-radius: 20px;\n  padding: 24px;\n  width: 888px;\n  height: 358px;\n  margin-bottom: 32px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nexport const AutoImg = styled.img`\n  border-radius: 10px;\n  width: 290px;\n  height: 310px;\n  object-fit: cover;\n`;\n\nexport const AutoTitleDiv = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`;\n\nexport const AutoTitle = styled.h2`\n  font-weight: 600;\n  font-size: 24px;\n  line-height: 1.25;\n  color: ${(p) => p.theme.colors.textTitleColor};\n  max-width: 340px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`;\n\nexport const PriceDiv = styled.div`\n  display: flex;\n  gap: 10px;\n`;\n\nexport const ButtonFavorite = styled.button`\n  background: none;\n  padding: 0;\n  width: 24px;\n  height: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const AutoSubtitleDiv = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  margin-bottom: 24px;\n`;\n\nexport const SubtitleDiv = styled.div`\n  display: flex;\n  gap: 4px;\n  align-items: baseline;\n  justify-content: center;\n`;\n\n// export const StarIcon = styled(GoStarFill)`\n//   fill: ${(p) => p.theme.colors.yellowColor};\n//   width: 16px;\n//   height: 16px;\n// `;\n\nexport const AutoSubtitleText = styled.p`\n  display: inline-block;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.5;\n  color: ${(p) => p.theme.colors.textTitleColor};\n`;\n\nexport const AutoDescription = styled.p`\n  width: 100%;\n  max-width: 525px;\n  margin-bottom: 24px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 150%;\n  color: ${(p) => p.theme.colors.textColor};\n`;\n\nexport const ShowMoreButton = styled.button`\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 1.5;\n  letter-spacing: -0.01em;\n  color: ${(p) => p.theme.colors.whiteColor};\n  background-color: ${(p) => p.theme.colors.redColor};\n  border-radius: 200px;\n  padding: 16px 40px;\n  width: 166px;\n  height: 56px;\n  transition: background-color 250ms ${(p) => p.theme.transition};\n\n  &:hover,\n  &:focus {\n    background-color: ${(p) => p.theme.colors.hoverButtonColor};\n  }\n`;\n\n\n\n\n// export const HeartIcon = styled(FaRegHeart)`\n//   width: 24px;\n//   height: 24px;\n//   stroke: ${(p) => p.theme.colors.textTitleColor};\n//   stroke-width: 2.3px;\n//   transition:\n//     fill 250ms ${(p) => p.theme.transition},\n//     stroke 250ms ${(p) => p.theme.transition};\n\n//   &:hover,\n//   &:focus {\n//     fill: ${(p) => p.theme.colors.redColor};\n//     stroke: ${(p) => p.theme.colors.redColor};\n//   }\n// `;\n\n// export const PressedHeartIcon = styled(FaHeart)`\n//   width: 24px;\n//   height: 24px;\n//   fill: ${(p) => p.theme.colors.redColor};\n//   transition: fill 250ms ${(p) => p.theme.transition};\n\n//   &:hover {\n//     fill: ${(p) => p.theme.colors.hoverButtonColor};\n//   }\n// `;\n\n// export const LocationIcon = styled(CiLocationOn)`\n//   stroke: ${(p) => p.theme.colors.textTitleColor};\n//   width: 16px;\n//   height: 16px;\n// `;\n\n// export const Location = styled.svg`\n//   fill: ${(p) => p.theme.colors.textTitleColor};\n//   width: 16px;\n//   height: 16px;\n// `;\n\n","import { useEffect, useState } from 'react';\n// import { CamperDetails } from '../CamperDetails/CamperDetails';\nimport { Modal } from '../Modal/Modal';\nimport { useDispatch } from 'react-redux';\nimport { updateFavorites } from '../../redux/autos/autosSlice';\nimport { AutoDescription, AutoImg, AutoSubtitleDiv, AutoSubtitleText, AutoTitle, AutoTitleDiv, ButtonFavorite, CardLi, PriceDiv, ShowMoreButton, SubtitleDiv } from './AutoCard.styled';\n\nexport const AutoCard = ({ auto }) => {\n  const dispatch = useDispatch();\n  const [isFavorite, setIsFavorite] = useState(checkFavorite(auto) || false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  useEffect(() => {\n    const storedFavorites = JSON.parse(localStorage.getItem('favorites'));\n    if (storedFavorites !== null && storedFavorites !== undefined) {\n      dispatch(updateFavorites(storedFavorites));\n    }\n  }, [dispatch]);\n    \n    \n\n  function checkFavorite(auto) {\n    const storedFavorites = JSON.parse(localStorage.getItem('favorites')) || [];\n    if (Array.isArray(storedFavorites)) {\n      return storedFavorites.some((favorite) => favorite.id === auto.id);\n    }\n    return false;\n  }\n  const openModal = () => {\n    setIsModalOpen(true);\n    document.body.style.overflow = 'hidden';\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n    document.body.style.overflow = '';\n  };\n\n  const addToFavorites = (auto) => {\n    let storedFavorites = JSON.parse(localStorage.getItem('favorites')) || [];\n    if (!Array.isArray(storedFavorites)) {\n      storedFavorites = [];\n    }\n    const updatedFavorites = [...storedFavorites, auto];\n    localStorage.setItem('favorites', JSON.stringify(updatedFavorites));\n    setIsFavorite(true);\n    if (storedFavorites.length > 0) {\n      dispatch(updateFavorites(updatedFavorites));\n    }\n  };\n\n  const removeFromFavorites = (auto) => {\n    let storedFavorites = JSON.parse(localStorage.getItem('favorites')) || [];\n    const updatedFavorites = storedFavorites.filter(\n      (favorite) => favorite.id !== auto.id\n    );\n\n    if (updatedFavorites.length === 0) {\n      localStorage.removeItem('favorites');\n      dispatch(updateFavorites([]));\n    } else {\n      localStorage.setItem('favorites', JSON.stringify(updatedFavorites));\n      dispatch(updateFavorites(updatedFavorites));\n    }\n\n    setIsFavorite(false);\n  };\n\n  const handleClick = (auto) => {\n    return isFavorite ? removeFromFavorites(auto) : addToFavorites(auto);\n  };\n\n  return (\n    <CardLi key={auto.id}>\n      <div>\n        <AutoImg src={auto.gallery[0]} alt={auto.name} />\n      </div>\n      <div>\n        <AutoTitleDiv>\n          <AutoTitle>{auto.name}</AutoTitle>\n          <PriceDiv>\n            <AutoTitle>{`₴${auto.price}`}</AutoTitle>\n            <ButtonFavorite\n              type=\"button\"\n              onClick={() => handleClick(auto)}\n            >\n              {/* {isFavorite ? <PressedHeartIcon /> : <HeartIcon />} */}\n            </ButtonFavorite>\n          </PriceDiv>\n        </AutoTitleDiv>\n        <AutoSubtitleDiv>\n          <SubtitleDiv>\n            {/* <StarIcon /> */}\n            <AutoSubtitleText>{`${auto.rating}(${auto.reviews.length} Reviews)`}</AutoSubtitleText>\n          </SubtitleDiv>\n          <SubtitleDiv>\n            {/* <LocationIcon /> */}\n            <AutoSubtitleText>{auto.location}</AutoSubtitleText>\n          </SubtitleDiv>\n        </AutoSubtitleDiv>\n        <AutoDescription>{auto.description}</AutoDescription>\n        {/* <CamperDetails auto={auto} /> */}\n        <ShowMoreButton type=\"button\" onClick={openModal}>\n          Show more\n        </ShowMoreButton>\n      </div>\n          <Modal\n              key={auto.id}\n              isModalOpen={isModalOpen}\n              closeModal={closeModal}\n              auto={auto}\n          />\n    </CardLi>\n  );\n};","import { Loader } from \"components/Loader/Loader\";\nimport { useEffect } from \"react\";\n// import toast from \"react-hot-toast\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateCurrentPage } from \"redux/autos/autosSlice\";\nimport { fetchAutos } from \"redux/autos/operations\";\nimport { selectAutos, selectCurrentPage, selectIsLoading } from \"redux/autos/selectors\";\n// import { AutosUl, CatalogDiv, LoadMoreButton } from \"./CatalogPage.styled\";\nimport { AutoCard } from \"components/AutoCard/AutoCard\";\n\nconst CatalogPage = () => {\n  const dispatch = useDispatch();\n  const currentPage = useSelector(selectCurrentPage);\n  const autosItems = useSelector(selectAutos);\n  // const visibleItems = useSelector(selectVisibleItems);\n  const isLoading = useSelector(selectIsLoading);\n  // const isVisibleButton = visibleItems.length !== catalogItems.length;\n  const isVisibleButton = autosItems.length % 4 === 0;\n\n  // let filteredCampers = useSelector(selectFilteredCampers);\n\n  useEffect(() => {\n    dispatch(fetchAutos(currentPage));\n  }, [dispatch, currentPage]);\n\n  return (\n    <div>\n      <h1>Catalog</h1>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div>\n          {/* <Aside /> */}\n          <div>\n            <ul>\n              {autosItems.length !== 0 &&\n                autosItems.map((item) => (\n                  <AutoCard key={item.id} camper={item} />\n                ))}\n            </ul>\n            {/* <ul>\n              {filteredCampers.length !== 0 &&\n                filteredCampers.map((item) => (\n                  <CamperCard key={item.id} camper={item} />\n                ))}\n            </ul> */}\n\n            {/* <ul>\n              {visibleItems.length !== 0 &&\n                visibleItems.map((item) => (\n                  <CamperCard key={item.id} camper={item} />\n                ))}\n            </ul> */}\n\n            {isVisibleButton && (\n              <button\n                type=\"button\"\n                onClick={() => dispatch(updateCurrentPage())}\n              >\n                Load more\n              </button>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CatalogPage;\n\n// export default function CatalogPage() {\n//   const dispatch = useDispatch();\n//   // const isLoading = useSelector(selectIsLoading);\n//   // const error = useSelector(selectError);\n//   const autos = useSelector(selectAutos);\n//   const currentPage = useSelector(selectCurrentPage);\n//   const visibleItems = useSelector(selectVisible);\n//   const isVisibleButton = visibleItems.length !== autos.length;\n\n//   useEffect(() => {\n//     dispatch(fetchAutos(currentPage));\n//   }, [dispatch, currentPage]);\n\n//   return ( \n//     <CatalogDiv>\n//       <div>Catalog</div>\n//        {/* {isLoading && !error && <Loader />}\n//        {error && (toast.error('Oops! Something went wrong. Please try again later.'))} */}\n//       <AutosUl>\n//         {visibleItems.length !== 0 && visibleItems.map((item) => (\n//           <AutoCard key={item.id} auto={item} /> \n//         ))}\n//       </AutosUl>\n//       {isVisibleButton && (\n//         <LoadMoreButton\n//           type=\"button\"\n//           onClick={() => dispatch(updateCurrentPage())}\n//         >\n//           Load more\n//         </LoadMoreButton>\n//       )}\n//     </CatalogDiv>\n//   );\n// }"],"names":["selectAutos","state","autos","autosItems","selectIsLoading","isLoading","selectCurrentPage","currentPage","CardLi","styled","_templateObject","_taggedTemplateLiteral","p","theme","colors","black","AutoImg","_templateObject2","AutoTitleDiv","_templateObject3","AutoTitle","_templateObject4","textTitleColor","PriceDiv","_templateObject5","ButtonFavorite","_templateObject6","AutoSubtitleDiv","_templateObject7","SubtitleDiv","_templateObject8","AutoSubtitleText","_templateObject9","AutoDescription","_templateObject10","textColor","ShowMoreButton","_templateObject11","whiteColor","redColor","transition","hoverButtonColor","AutoCard","_ref","auto","dispatch","useDispatch","isFavorite","setIsFavorite","useState","storedFavorites","JSON","parse","localStorage","getItem","Array","isArray","some","favorite","id","checkFavorite","isModalOpen","setIsModalOpen","useEffect","undefined","updateFavorites","handleClick","updatedFavorites","filter","length","removeItem","setItem","stringify","removeFromFavorites","addToFavorites","_jsxs","children","_jsx","src","gallery","alt","name","concat","price","type","onClick","rating","reviews","location","description","openModal","document","body","style","overflow","Modal","closeModal","CatalogPage","useSelector","isVisibleButton","fetchAutos","Loader","map","item","camper","updateCurrentPage"],"sourceRoot":""}